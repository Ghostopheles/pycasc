"""
This type stub file was generated by cyright.
"""

from typing import Optional, Tuple, Union
from dataclasses import dataclass
from pycasc.c_casclib import *

ERROR_STR_MAP = ...

class CascLibException(Exception):
    error_code: int
    def __init__(self, error_code: int, message: Optional[str] = ...) -> None: ...

class FileOpenFlags:
    CASC_OPEN_BY_NAME = ...
    CASC_OPEN_BY_CKEY = ...
    CASC_OPEN_BY_EKEY = ...
    CASC_OPEN_BY_FILEID = ...
    CASC_OPEN_TYPE_MASK = ...
    CASC_OPEN_FLAGS_MASK = ...
    CASC_STRICT_DATA_CHECK = ...
    CASC_OVERCOME_ENCRYPTED = ...
    CASC_OPEN_CKEY_ONCE = ...

class LocaleFlags:
    CASC_LOCALE_ALL = ...
    CASC_LOCALE_NONE = ...
    CASC_LOCALE_UNKNOWN1 = ...
    CASC_LOCALE_ENUS = ...
    CASC_LOCALE_KOKR = ...
    CASC_LOCALE_RESERVED = ...
    CASC_LOCALE_FRFR = ...
    CASC_LOCALE_DEDE = ...
    CASC_LOCALE_ZHCN = ...
    CASC_LOCALE_ESES = ...
    CASC_LOCALE_ZHTW = ...
    CASC_LOCALE_ENGB = ...
    CASC_LOCALE_ENCN = ...
    CASC_LOCALE_ENTW = ...
    CASC_LOCALE_ESMX = ...
    CASC_LOCALE_RURU = ...
    CASC_LOCALE_PTBR = ...
    CASC_LOCALE_ITIT = ...
    CASC_LOCALE_PTPT = ...

@dataclass
class FileInfoFull:
    ckey: bytes
    ekey: bytes
    dataFileName: str
    storageOffset: int
    segmentOffset: int
    tagBitMask: int
    fileNameHash: int
    contentSize: int
    encodedSize: int
    segmentIndex: int
    spanCount: int
    fileDataID: int
    localeFlags: int
    contentFlags: int
    ...

def _last_error():  # -> CascLibException:
    ...

class CascFile:
    def close(self):  # -> None:
        """Closes the file."""
        ...

    def _close_file(self):  # -> None:
        ...

    @property
    def info(self) -> FileInfoFull: ...
    @info.setter
    def info(self, value): ...
    @info.deleter
    def info(self): ...
    @property
    def data(self):  # -> bytes:
        ...

    @data.setter
    def data(self, other): ...
    @data.deleter
    def data(self): ...
    def __enter__(self):  # -> Self@CascFile:
        ...

    def __exit__(self, exc_type, exc_val, exc_tb):  # -> None:
        ...

class CascHandler:
    @staticmethod
    def _identifier_to_open_flags(
        identifier: Union[str, int, bytes]
    ) -> Optional[FileOpenFlags]: ...
    def read_file(
        self, identifier: Union[str, int, bytes], open_flags: int
    ) -> CascFile: ...
    def read_file_by_id(
        self, fileID: int, open_flags: Optional[int] = ...
    ) -> CascFile: ...
    def read_file_by_name(
        self, file_name: int, open_flags: Optional[int] = ...
    ) -> CascFile: ...
    def read_file_by_ckey(
        self, ckey: int, open_flags: Optional[int] = ...
    ) -> CascFile: ...
    def read_file_by_ekey(
        self, ekey: int, open_flags: Optional[int] = ...
    ) -> CascFile: ...
    def file_exists(
        self, identifier: Union[str, int, bytes], open_flags: Optional[int] = ...
    ) -> bool: ...
    def close(self):  # -> None:
        """Closes the CASC storage handle."""
        ...

    def __contains__(self, item: Tuple[Union[str, int, bytes], int]):  # -> bint:
        ...

    def __enter__(self):  # -> Self@CascHandler:
        ...

    def __exit__(self, exc_type, exc_val, exc_tb):  # -> None:
        ...
